CCS PCM C Compiler, Version 5.049, 5967               12-Eyl-22 13:48

               Filename:   C:\Users\Eray\Desktop\Pic programlama\RS232 ile bilgisayardan step motor kontrolü\rs232 step kod.lst

               ROM used:   540 words (7%)
                           Largest free fragment is 2048
               RAM used:   14 (4%) at main() level
                           23 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   17E
0003:  NOP
.................... #include<16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  01
0009:  RETLW  03
000A:  RETLW  02
000B:  RETLW  06
000C:  RETLW  04
000D:  RETLW  0C
000E:  RETLW  08
000F:  RETLW  09
0010:  DATA C9,39
0011:  DATA EC,32
0012:  DATA 6D,10
0013:  DATA D3,32
0014:  DATA E3,34
0015:  DATA EE,34
0016:  DATA 7A,1D
0017:  DATA 00,00
0018:  DATA 8A,29
0019:  DATA E1,33
001A:  DATA 20,14
001B:  DATA D2,14
001C:  DATA A0,29
001D:  DATA 6F,36
001E:  DATA 20,14
001F:  DATA CC,14
0020:  DATA 00,01
0021:  DATA 0A,06
0022:  DATA CD,37
0023:  DATA F4,37
0024:  DATA 72,10
0025:  DATA D3,30
0026:  DATA E7,30
0027:  DATA 20,05
0028:  DATA C4,37
0029:  DATA EE,3A
002A:  DATA F9,37
002B:  DATA 72,17
002C:  DATA 2E,17
002D:  DATA 00,01
002E:  DATA 0A,06
002F:  DATA CD,37
0030:  DATA F4,37
0031:  DATA 72,10
0032:  DATA D3,37
0033:  DATA EC,30
0034:  DATA 20,05
0035:  DATA C4,37
0036:  DATA EE,3A
0037:  DATA F9,37
0038:  DATA 72,17
0039:  DATA 2E,17
003A:  DATA 00,01
003B:  DATA 0A,06
003C:  DATA CD,37
003D:  DATA F4,37
003E:  DATA 72,10
003F:  DATA C4,3A
0040:  DATA F2,3A
0041:  DATA F9,37
0042:  DATA 72,17
0043:  DATA 2E,17
0044:  DATA 00,00
*
0128:  MOVF   0B,W
0129:  MOVWF  25
012A:  BCF    0B.7
012B:  BSF    03.5
012C:  BSF    03.6
012D:  BSF    0C.7
012E:  BSF    0C.0
012F:  NOP
0130:  NOP
0131:  BCF    03.5
0132:  BCF    03.6
0133:  BTFSC  25.7
0134:  BSF    0B.7
0135:  BSF    03.6
0136:  MOVF   0C,W
0137:  ANDLW  7F
0138:  BTFSC  03.2
0139:  GOTO   17C
013A:  BCF    03.6
013B:  MOVWF  25
013C:  BSF    03.6
013D:  MOVF   0D,W
013E:  BCF    03.6
013F:  MOVWF  26
0140:  BSF    03.6
0141:  MOVF   0F,W
0142:  BCF    03.6
0143:  MOVWF  27
0144:  MOVF   25,W
0145:  MOVWF  28
0146:  CALL   0FC
0147:  MOVF   26,W
0148:  BSF    03.6
0149:  MOVWF  0D
014A:  BCF    03.6
014B:  MOVF   27,W
014C:  BSF    03.6
014D:  MOVWF  0F
014E:  BCF    03.6
014F:  MOVF   0B,W
0150:  MOVWF  28
0151:  BCF    0B.7
0152:  BSF    03.5
0153:  BSF    03.6
0154:  BSF    0C.7
0155:  BSF    0C.0
0156:  NOP
0157:  NOP
0158:  BCF    03.5
0159:  BCF    03.6
015A:  BTFSC  28.7
015B:  BSF    0B.7
015C:  BSF    03.6
015D:  RLF    0C,W
015E:  RLF    0E,W
015F:  ANDLW  7F
0160:  BTFSC  03.2
0161:  GOTO   17C
0162:  BCF    03.6
0163:  MOVWF  25
0164:  BSF    03.6
0165:  MOVF   0D,W
0166:  BCF    03.6
0167:  MOVWF  26
0168:  BSF    03.6
0169:  MOVF   0F,W
016A:  BCF    03.6
016B:  MOVWF  27
016C:  MOVF   25,W
016D:  MOVWF  28
016E:  CALL   0FC
016F:  MOVF   26,W
0170:  BSF    03.6
0171:  MOVWF  0D
0172:  BCF    03.6
0173:  MOVF   27,W
0174:  BSF    03.6
0175:  MOVWF  0F
0176:  INCF   0D,F
0177:  BTFSC  03.2
0178:  INCF   0F,F
0179:  BCF    03.6
017A:  GOTO   128
017B:  BSF    03.6
017C:  BCF    03.6
017D:  RETURN
....................  
.................... #list 
....................  
....................  
.................... #use delay(clock=4000000) 
*
0045:  MOVLW  2A
0046:  MOVWF  04
0047:  BCF    03.7
0048:  MOVF   00,W
0049:  BTFSC  03.2
004A:  GOTO   059
004B:  MOVLW  01
004C:  MOVWF  78
004D:  CLRF   77
004E:  DECFSZ 77,F
004F:  GOTO   04E
0050:  DECFSZ 78,F
0051:  GOTO   04D
0052:  MOVLW  4A
0053:  MOVWF  77
0054:  DECFSZ 77,F
0055:  GOTO   054
0056:  GOTO   057
0057:  DECFSZ 00,F
0058:  GOTO   04B
0059:  RETURN
....................  
.................... #use fast_io(b) 
.................... #use fast_io(d) 
....................  
.................... #include<lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0072:  MOVLW  0F
0073:  BSF    03.5
0074:  ANDWF  08,W
0075:  IORLW  F0
0076:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0077:  BCF    03.5
0078:  BSF    08.2
....................    delay_cycles(1); 
0079:  NOP
....................    lcd_output_enable(1); 
007A:  BSF    08.0
....................    delay_cycles(1); 
007B:  NOP
....................    high = lcd_read_nibble(); 
007C:  CALL   066
007D:  MOVF   78,W
007E:  MOVWF  30
....................        
....................    lcd_output_enable(0); 
007F:  BCF    08.0
....................    delay_cycles(1); 
0080:  NOP
....................    lcd_output_enable(1); 
0081:  BSF    08.0
....................    delay_us(1); 
0082:  NOP
....................    low = lcd_read_nibble(); 
0083:  CALL   066
0084:  MOVF   78,W
0085:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
0086:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0087:  MOVLW  0F
0088:  BSF    03.5
0089:  ANDWF  08,W
008A:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
008B:  BCF    03.5
008C:  SWAPF  30,W
008D:  MOVWF  77
008E:  MOVLW  F0
008F:  ANDWF  77,F
0090:  MOVF   77,W
0091:  IORWF  2F,W
0092:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0066:  MOVF   08,W
0067:  MOVWF  77
0068:  SWAPF  08,W
0069:  ANDLW  0F
006A:  MOVWF  78
....................   #endif 
006B:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
005A:  SWAPF  30,W
005B:  ANDLW  F0
005C:  MOVWF  77
005D:  MOVLW  0F
005E:  ANDWF  08,W
005F:  IORWF  77,W
0060:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0061:  NOP
....................    lcd_output_enable(1); 
0062:  BSF    08.0
....................    delay_us(2); 
0063:  GOTO   064
....................    lcd_output_enable(0); 
0064:  BCF    08.0
0065:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
006C:  BSF    03.5
006D:  BCF    08.0
....................    lcd_rs_tris(); 
006E:  BCF    08.1
....................    lcd_rw_tris(); 
006F:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0070:  BCF    03.5
0071:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0093:  MOVF   78,W
0094:  MOVWF  2F
0095:  BTFSC  2F.7
0096:  GOTO   072
....................    lcd_output_rs(address); 
0097:  BTFSS  2D.0
0098:  BCF    08.1
0099:  BTFSC  2D.0
009A:  BSF    08.1
....................    delay_cycles(1); 
009B:  NOP
....................    lcd_output_rw(0); 
009C:  BCF    08.2
....................    delay_cycles(1); 
009D:  NOP
....................    lcd_output_enable(0); 
009E:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
009F:  SWAPF  2E,W
00A0:  MOVWF  2F
00A1:  MOVLW  0F
00A2:  ANDWF  2F,F
00A3:  MOVF   2F,W
00A4:  MOVWF  30
00A5:  CALL   05A
....................    lcd_send_nibble(n & 0xf); 
00A6:  MOVF   2E,W
00A7:  ANDLW  0F
00A8:  MOVWF  2F
00A9:  MOVWF  30
00AA:  CALL   05A
00AB:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00AC:  MOVLW  28
00AD:  MOVWF  26
00AE:  MOVLW  0C
00AF:  MOVWF  27
00B0:  MOVLW  01
00B1:  MOVWF  28
00B2:  MOVLW  06
00B3:  MOVWF  29
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00B4:  BCF    08.0
....................    lcd_output_rs(0); 
00B5:  BCF    08.1
....................    lcd_output_rw(0); 
00B6:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00B7:  MOVLW  0F
00B8:  BSF    03.5
00B9:  ANDWF  08,W
00BA:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00BB:  BCF    08.0
....................    lcd_rs_tris(); 
00BC:  BCF    08.1
....................    lcd_rw_tris(); 
00BD:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00BE:  MOVLW  0F
00BF:  BCF    03.5
00C0:  MOVWF  2A
00C1:  CALL   045
....................    for(i=1;i<=3;++i) 
00C2:  MOVLW  01
00C3:  MOVWF  25
00C4:  MOVF   25,W
00C5:  SUBLW  03
00C6:  BTFSS  03.0
00C7:  GOTO   0D0
....................    { 
....................        lcd_send_nibble(3); 
00C8:  MOVLW  03
00C9:  MOVWF  30
00CA:  CALL   05A
....................        delay_ms(5); 
00CB:  MOVLW  05
00CC:  MOVWF  2A
00CD:  CALL   045
00CE:  INCF   25,F
00CF:  GOTO   0C4
....................    } 
....................     
....................    lcd_send_nibble(2); 
00D0:  MOVLW  02
00D1:  MOVWF  30
00D2:  CALL   05A
....................    delay_ms(5); 
00D3:  MOVLW  05
00D4:  MOVWF  2A
00D5:  CALL   045
....................    for(i=0;i<=3;++i) 
00D6:  CLRF   25
00D7:  MOVF   25,W
00D8:  SUBLW  03
00D9:  BTFSS  03.0
00DA:  GOTO   0E7
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00DB:  MOVLW  26
00DC:  ADDWF  25,W
00DD:  MOVWF  04
00DE:  BCF    03.7
00DF:  MOVF   00,W
00E0:  MOVWF  2A
00E1:  CLRF   2D
00E2:  MOVF   2A,W
00E3:  MOVWF  2E
00E4:  CALL   06C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00E5:  INCF   25,F
00E6:  GOTO   0D7
00E7:  BCF    0A.3
00E8:  BCF    0A.4
00E9:  GOTO   1AE (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00EA:  DECFSZ 2A,W
00EB:  GOTO   0ED
00EC:  GOTO   0F0
....................       address=LCD_LINE_TWO; 
00ED:  MOVLW  40
00EE:  MOVWF  2B
00EF:  GOTO   0F1
....................    else 
....................       address=0; 
00F0:  CLRF   2B
....................       
....................    address+=x-1; 
00F1:  MOVLW  01
00F2:  SUBWF  29,W
00F3:  ADDWF  2B,F
....................    lcd_send_byte(0,0x80|address); 
00F4:  MOVF   2B,W
00F5:  IORLW  80
00F6:  MOVWF  2C
00F7:  CLRF   2D
00F8:  MOVF   2C,W
00F9:  MOVWF  2E
00FA:  CALL   06C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00FB:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00FC:  MOVF   28,W
00FD:  XORLW  07
00FE:  BTFSC  03.2
00FF:  GOTO   10A
0100:  XORLW  0B
0101:  BTFSC  03.2
0102:  GOTO   10F
0103:  XORLW  06
0104:  BTFSC  03.2
0105:  GOTO   117
0106:  XORLW  02
0107:  BTFSC  03.2
0108:  GOTO   11D
0109:  GOTO   122
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
010A:  MOVLW  01
010B:  MOVWF  29
010C:  MOVWF  2A
010D:  CALL   0EA
010E:  GOTO   127
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
010F:  CLRF   2D
0110:  MOVLW  01
0111:  MOVWF  2E
0112:  CALL   06C
....................                      delay_ms(2); 
0113:  MOVLW  02
0114:  MOVWF  2A
0115:  CALL   045
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0116:  GOTO   127
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0117:  MOVLW  01
0118:  MOVWF  29
0119:  MOVLW  02
011A:  MOVWF  2A
011B:  CALL   0EA
011C:  GOTO   127
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
011D:  CLRF   2D
011E:  MOVLW  10
011F:  MOVWF  2E
0120:  CALL   06C
0121:  GOTO   127
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0122:  MOVLW  01
0123:  MOVWF  2D
0124:  MOVF   28,W
0125:  MOVWF  2E
0126:  CALL   06C
....................      #endif 
....................    } 
0127:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #use rs232(baud=9600, xmit=pin_c6, rcv=pin_c7, parity=N, stop=1) 
....................  
.................... int i,hiz=500; 
.................... char islem=0; 
....................  
.................... const int yarim_adim[]={0x01,0x03,0x02,0x06,0x04,0x0C,0x08,0x09}; //Step motor yarým adým dönüþ adýmlarý 
....................  
.................... void main(){ 
*
017E:  MOVF   03,W
017F:  ANDLW  1F
0180:  MOVWF  03
0181:  MOVLW  19
0182:  BSF    03.5
0183:  MOVWF  19
0184:  MOVLW  A6
0185:  MOVWF  18
0186:  MOVLW  90
0187:  BCF    03.5
0188:  MOVWF  18
0189:  MOVLW  F4
018A:  MOVWF  21
018B:  CLRF   22
018C:  CLRF   24
018D:  CLRF   23
018E:  BSF    03.5
018F:  BSF    1F.0
0190:  BSF    1F.1
0191:  BSF    1F.2
0192:  BCF    1F.3
0193:  BCF    03.7
....................  
.................... setup_psp(PSP_DISABLED); 
0194:  BCF    09.4
.................... setup_timer_1(T1_DISABLED); 
0195:  BCF    03.5
0196:  CLRF   10
.................... setup_timer_2(T2_DISABLED,0,1); 
0197:  MOVLW  00
0198:  MOVWF  78
0199:  MOVWF  12
019A:  MOVLW  00
019B:  BSF    03.5
019C:  MOVWF  12
.................... setup_adc_ports(NO_ANALOGS); 
019D:  BSF    1F.0
019E:  BSF    1F.1
019F:  BSF    1F.2
01A0:  BCF    1F.3
.................... setup_adc(ADC_OFF); 
01A1:  BCF    03.5
01A2:  BCF    1F.0
.................... setup_ccp1(CCP_OFF); 
01A3:  MOVLW  F0
01A4:  ANDWF  17,F
.................... setup_ccp2(CCP_OFF); 
01A5:  ANDWF  1D,F
....................  
.................... set_tris_b(0x00); 
01A6:  MOVLW  00
01A7:  BSF    03.5
01A8:  MOVWF  06
.................... set_tris_d(0x00); 
01A9:  MOVWF  08
....................  
.................... output_d(0x00); 
01AA:  BCF    03.5
01AB:  CLRF   08
.................... output_b(0x00); 
01AC:  CLRF   06
....................  
.................... lcd_init(); 
01AD:  GOTO   0AC
....................  
.................... printf(lcd_putc,"Islem Seciniz:"); 
01AE:  MOVLW  10
01AF:  BSF    03.6
01B0:  MOVWF  0D
01B1:  MOVLW  00
01B2:  MOVWF  0F
01B3:  BCF    03.6
01B4:  CALL   128
.................... delay_ms(200); 
01B5:  MOVLW  C8
01B6:  MOVWF  2A
01B7:  CALL   045
.................... printf(lcd_putc,"\nSag (R) Sol (L)"); 
01B8:  MOVLW  18
01B9:  BSF    03.6
01BA:  MOVWF  0D
01BB:  MOVLW  00
01BC:  MOVWF  0F
01BD:  BCF    03.6
01BE:  CALL   128
.................... delay_ms(200); 
01BF:  MOVLW  C8
01C0:  MOVWF  2A
01C1:  CALL   045
....................  
.................... while(true){ 
....................  
.................... islem="null"; //islem deðiþkeninin içeriði boþ olarak ayarlanýyor. 
01C2:  MOVLW  6E
01C3:  MOVWF  22
.................... islem=getchar(); //rs232'den gelen karakter islem deðiþkenine aktarýlýyor. Yani gelen karakter okunuyor. 
01C4:  BTFSS  0C.5
01C5:  GOTO   1C4
01C6:  MOVF   1A,W
01C7:  MOVWF  22
.................... putc(islem); //rs232 üzerinden klavyeden girilen karakter ekrana gönderiiliyor. 
01C8:  MOVF   22,W
01C9:  BTFSS  0C.4
01CA:  GOTO   1C9
01CB:  MOVWF  19
....................  
.................... while(islem=='R' || islem=='r'){ 
01CC:  MOVF   22,W
01CD:  SUBLW  52
01CE:  BTFSC  03.2
01CF:  GOTO   1D4
01D0:  MOVF   22,W
01D1:  SUBLW  72
01D2:  BTFSS  03.2
01D3:  GOTO   1F1
....................  
....................    printf(lcd_putc,"\n\fMotor Saga \nDonuyor...",); 
01D4:  MOVLW  21
01D5:  BSF    03.6
01D6:  MOVWF  0D
01D7:  MOVLW  00
01D8:  MOVWF  0F
01D9:  BCF    03.6
01DA:  CALL   128
....................    for(;i<8;i++){ //Step motorun saða dönmesi için for döngüsü baþlatýlýyor.Bunlar Saða dönme deðerleri 
01DB:  MOVF   20,W
01DC:  SUBLW  07
01DD:  BTFSS  03.0
01DE:  GOTO   1EE
....................     
....................    output_b(yarim_adim[i]); //Step motor her defasýnda 1 adým ilerlemesini saðlýyoruz 
01DF:  MOVF   20,W
01E0:  CALL   004
01E1:  MOVWF  25
01E2:  MOVWF  06
....................    delay_ms(hiz); //adýmlar arasý süre 
01E3:  MOVF   21,W
01E4:  MOVWF  2A
01E5:  CALL   045
....................     
....................    if(i==7) 
01E6:  MOVF   20,W
01E7:  SUBLW  07
01E8:  BTFSC  03.2
....................    i=0; //i deðeri 7 olursa sýfýrla 
01E9:  CLRF   20
....................     
.................... if(kbhit()) 
01EA:  BTFSC  0C.5
.................... break; //klavyeden veri alýndýysa döngüden çýk. For döngüsünden 
01EB:  GOTO   1EE
01EC:  INCF   20,F
01ED:  GOTO   1DB
....................  
....................    } 
.................... if(kbhit()) 
01EE:  BTFSC  0C.5
.................... break; //klavyeden ver alýndýysa döngüden çýk.While döngüsünden 
01EF:  GOTO   1F1
01F0:  GOTO   1CC
....................  
.................... } 
....................  
.................... while(islem=='L' || islem=='l'){ 
01F1:  MOVF   22,W
01F2:  SUBLW  4C
01F3:  BTFSC  03.2
01F4:  GOTO   1F9
01F5:  MOVF   22,W
01F6:  SUBLW  6C
01F7:  BTFSS  03.2
01F8:  GOTO   213
....................  
....................    printf(lcd_putc,"\n\fMotor Sola \nDonuyor..."); 
01F9:  MOVLW  2E
01FA:  BSF    03.6
01FB:  MOVWF  0D
01FC:  MOVLW  00
01FD:  MOVWF  0F
01FE:  BCF    03.6
01FF:  CALL   128
....................    for(;i>=0;i--){ //Step motorun sola dönmesi için for döngüsü baþlatýlýyor.Bunlar sola dönme deðerleri 
....................     
....................    if(i==0) 
0200:  MOVF   20,F
0201:  BTFSS  03.2
0202:  GOTO   205
....................    i=7; //i deðeri 0 olursa 7 olsun 
0203:  MOVLW  07
0204:  MOVWF  20
....................     
....................    output_b(yarim_adim[i]); //Step motor her defasýnda 1 adým ilerlemesini saðlýyoruz 
0205:  MOVF   20,W
0206:  CALL   004
0207:  MOVWF  25
0208:  MOVWF  06
....................    delay_ms(hiz); //adýmlar arasý süre 
0209:  MOVF   21,W
020A:  MOVWF  2A
020B:  CALL   045
....................      
.................... if(kbhit()) 
020C:  BTFSC  0C.5
.................... break; //klavyeden veri alýndýysa döngüden çýk. For döngüsünden 
020D:  GOTO   210
020E:  DECF   20,F
020F:  GOTO   200
....................  
....................    } 
.................... if(kbhit()) 
0210:  BTFSC  0C.5
....................  
.................... break; //klavyeden ver alýndýysa döngüden çýk.While döngüsünden 
0211:  GOTO   213
0212:  GOTO   1F1
....................   
....................  } 
.................... printf(lcd_putc,"\n\fMotor Duruyor..."); 
0213:  MOVLW  3B
0214:  BSF    03.6
0215:  MOVWF  0D
0216:  MOVLW  00
0217:  MOVWF  0F
0218:  BCF    03.6
0219:  CALL   128
021A:  GOTO   1C2
.................... } 
....................  
.................... } 
....................  
021B:  SLEEP
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3B73   RC NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
